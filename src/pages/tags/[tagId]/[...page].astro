---
import { getCollection } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import PostsPage from '../../../components/PostsPage.astro';
import { type PostSummary } from '../../../models/postSummary';
import { type ExternalPostSummary } from '../../../models/externalPostSummary';
import { type Tag } from '../../../models/tag';
import { PAGE_SIZE } from '../../../consts';
import { EXTERNAL_POSTS } from '../../../externalPosts';

type Props = {
  tag: Tag;
  pageLength: number;
  posts: (PostSummary | ExternalPostSummary)[];
};

export async function getStaticPaths() {
  const posts: PostSummary[] = (await getCollection('posts')).map((post) => {
    return {
      slug: post.slug,
      title: post.data.title,
      description: post.data.description,
      publishedDate: post.data.publishedDate,
      tags: post.data.tags,
    };
  });
  const externalPosts: ExternalPostSummary[] = EXTERNAL_POSTS.map((post) => {
    return {
      platform: post.platform,
      title: post.title,
      description: post.description,
      publishedDate: new Date(post.publishedDate),
      tags: post.tags,
      url: post.url,
    };
  });
  const allPosts = [...posts, ...externalPosts].sort((a, b) =>
    a.publishedDate > b.publishedDate ? -1 : 1,
  );
  const tags = (() => {
    const tags: Set<Tag> = new Set();
    allPosts.forEach((post) => {
      post.tags?.forEach((tag) => tags.add(tag));
    });
    return Array.from(tags.values());
  })();
  const ret: {
    params: { tagId: string; page: string | undefined };
    props: Props;
  }[] = [];
  tags.forEach((tag) => {
    const filteredPosts = allPosts.filter((post) =>
      post.tags?.map((tag) => tag.id)?.includes(tag.id),
    );
    const pageLength = Math.ceil(filteredPosts.length / PAGE_SIZE);
    for (let i = 0; i < pageLength; i++) {
      ret.push({
        params: {
          tagId: tag.id,
          page: i === 0 ? undefined : String(i + 1),
        },
        props: {
          tag: tag,
          pageLength: pageLength,
          posts: filteredPosts.slice(i * PAGE_SIZE, (i + 1) * PAGE_SIZE),
        },
      });
    }
  });
  return ret;
}

const { page: _page } = Astro.params;
const { tag, pageLength, posts } = Astro.props;
const page = _page ? Number(_page) : 1;
---

<>
  <BaseLayout title={tag.name}>
    <PostsPage
      title={tag.name}
      posts={posts}
      page={page}
      pageLength={pageLength}
      baseUrl=`/tags/${tag.id}/`
    />
  </BaseLayout>
</>
