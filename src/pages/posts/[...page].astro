---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostsPage from '../../components/PostsPage.astro';
import { type PostSummary } from '../../models/postSummary';
import { type ExternalPostSummary } from '../../models/externalPostSummary';
import { POSTS_TITLE, PAGE_SIZE } from '../../consts';
import { EXTERNAL_POSTS } from '../../externalPosts';

type Props = {
  pageLength: number;
  posts: (PostSummary | ExternalPostSummary)[];
};

export async function getStaticPaths() {
  const posts: PostSummary[] = (await getCollection('posts')).map((post) => {
    return {
      slug: post.slug,
      title: post.data.title,
      description: post.data.description,
      publishedDate: post.data.publishedDate,
      tags: post.data.tags,
    };
  });
  const externalPosts: ExternalPostSummary[] = EXTERNAL_POSTS.map((post) => {
    return {
      platform: post.platform,
      title: post.title,
      description: post.description,
      publishedDate: new Date(post.publishedDate),
      tags: post.tags,
      url: post.url,
    };
  });
  const allPosts = [...posts, ...externalPosts].sort((a, b) =>
    a.publishedDate > b.publishedDate ? -1 : 1,
  );
  const pageLength = Math.ceil(allPosts.length / PAGE_SIZE);
  const ret: {
    params: { page: string | undefined };
    props: Props;
  }[] = [];
  for (let i = 0; i < pageLength; i++) {
    ret.push({
      params: { page: i === 0 ? undefined : String(i + 1) },
      props: {
        pageLength: pageLength,
        posts: allPosts.slice(i * PAGE_SIZE, (i + 1) * PAGE_SIZE),
      },
    });
  }
  return ret;
}

const { page: _page } = Astro.params;
const { pageLength, posts } = Astro.props;
const page = _page ? Number(_page) : 1;
---

<>
  <BaseLayout title={POSTS_TITLE}>
    <PostsPage
      title={POSTS_TITLE}
      posts={posts}
      page={page}
      pageLength={pageLength}
      baseUrl="/posts/"
    />
  </BaseLayout>
</>
